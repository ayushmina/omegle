<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat - Connect with Strangers</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            overflow: hidden;
        }

        /* Video and Chat Combined Layout */
        .main-container {
            display: flex;
            height: 100vh;
            max-width: 100%;
            background: white;
        }

        /* Video Section */
        .video-section {
            flex: 1;
            position: relative;
            background: #000;
            display: flex;
            flex-direction: column;
        }

        .video-container {
            flex: 1;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .main-video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            background: #000;
        }

        .local-video {
            position: absolute;
            bottom: 20px;
            right: 20px;
            width: 200px;
            height: 150px;
            border-radius: 12px;
            border: 3px solid white;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            object-fit: cover;
            z-index: 10;
        }

        .video-controls {
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 15px;
            z-index: 20;
        }

        .video-control-btn {
            padding: 12px 24px;
            border-radius: 25px;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 16px rgba(0,0,0,0.2);
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .video-control-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .video-control-btn.start-chat {
            background: linear-gradient(135deg, #4CAF50, #45a049);
        }

        /* Chat Section */
        .chat-section {
            width: 400px;
            display: flex;
            flex-direction: column;
            background: white;
            border-left: 1px solid #e5e7eb;
        }

        /* Chat Header */
        .chat-header {
            padding: 16px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            text-align: center;
            border-bottom: 1px solid #e5e7eb;
        }

        .chat-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .chat-header .status {
            font-size: 12px;
            opacity: 0.9;
            margin-top: 4px;
        }

        /* Status Area */
        .status-area {
            padding: 16px;
            text-align: center;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-bottom: 1px solid #e5e7eb;
        }

        .status-message {
            font-size: 14px;
            font-weight: 500;
            margin-bottom: 4px;
        }

        .status-subtitle {
            font-size: 12px;
            opacity: 0.9;
        }

        /* Messages Area */
        .messages-container {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            background: #f8fafc;
            max-height: calc(100vh - 200px);
        }

        .message-item {
            margin-bottom: 12px;
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message-sent {
            display: flex;
            justify-content: flex-end;
        }

        .message-received {
            display: flex;
            justify-content: flex-start;
        }

        .message-content {
            max-width: 80%;
            padding: 8px 12px;
            border-radius: 16px;
            word-wrap: break-word;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            font-size: 14px;
        }

        .message-sent .message-content {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message-received .message-content {
            background: white;
            color: #374151;
            border-bottom-left-radius: 4px;
            border: 1px solid #e5e7eb;
        }

        .system-message {
            display: flex;
            justify-content: center;
            margin: 12px 0;
        }

        .system-message .message-content {
            background: #fef3c7;
            color: #92400e;
            border: 1px solid #fbbf24;
            font-size: 12px;
            max-width: 90%;
        }

        /* Typing Indicator */
        .typing-indicator {
            display: none;
            padding: 8px 16px;
            font-style: italic;
            color: #6b7280;
            font-size: 12px;
            background: #f8fafc;
        }

        .typing-indicator.show {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Input Area */
        .input-area {
            background: white;
            border-top: 1px solid #e5e7eb;
            padding: 16px;
        }

        .input-form {
            display: flex;
            gap: 8px;
            margin-bottom: 12px;
        }

        .message-input {
            flex: 1;
            padding: 8px 12px;
            border: 2px solid #e5e7eb;
            border-radius: 20px;
            font-size: 14px;
            outline: none;
            transition: all 0.3s ease;
        }

        .message-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .message-input:disabled {
            background: #f3f4f6;
            cursor: not-allowed;
        }

        /* Buttons */
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 20px;
            font-weight: 600;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }

        .btn-next {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
            box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);
        }

        .btn-next:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
        }

        .btn-end {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
        }

        .btn-end:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
        }

        /* Controls Row */
        .controls-row {
            display: flex;
            gap: 8px;
            justify-content: space-between;
        }

        .controls-right {
            display: flex;
            gap: 8px;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }

            .video-section {
                height: 50vh;
            }

            .chat-section {
                width: 100%;
                height: 50vh;
            }

            .local-video {
                width: 120px;
                height: 90px;
                bottom: 10px;
                right: 10px;
            }

            .video-controls {
                bottom: 10px;
            }

            .video-control-btn {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }
        }

        /* Loading Placeholder */
        .video-placeholder {
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
            text-align: center;
        }

        .video-placeholder .icon {
            font-size: 48px;
            margin-bottom: 16px;
        }
    </style>
    <link href="/css/style.css" rel="stylesheet">
</head>

<body>
    <%- include('partials/header') %>

    <!-- Main Combined Interface -->
    <div class="main-container">
        <!-- Video Section -->
        <div class="video-section">
            <div class="video-container">
                <!-- Video Placeholder when no call -->
                <div class="video-placeholder" id="video-placeholder">
                    <div>
                        <div class="icon">📹</div>
                        <div>Connecting to video chat...</div>
                        <div style="font-size: 14px; opacity: 0.8; margin-top: 8px;">Camera will start automatically</div>
                    </div>
                </div>
                
                <!-- Main video (remote) -->
                <video class="main-video" id="remoteVideo" autoplay playsinline style="display: none;"></video>
                
                <!-- Local video (small) -->
                <video class="local-video" id="localVideo" autoplay muted playsinline style="display: none;"></video>
            </div>

            <!-- Video Controls -->
            <div class="video-controls">
                <button class="video-control-btn start-chat" id="startChatBtn" title="Start Video Chat">
                    🚀 Start Video Chat
                </button>
            </div>
        </div>

        <!-- Chat Section -->
        <div class="chat-section">
            <!-- Chat Header -->
            <div class="chat-header">
                <h3>💬 Chat</h3>
                <div class="status" id="chat-status">Connecting...</div>
            </div>

            <!-- Status Area (when not connected) -->
            <div class="status-area" id="status-area">
                <div class="status-message" id="status-message">Looking for someone to chat with...</div>
                <div class="status-subtitle">Please wait while we connect you with a stranger</div>
            </div>

            <!-- Messages Container -->
            <div class="messages-container" id="message-container">
                <!-- Messages will be added here dynamically -->
            </div>

            <!-- Typing Indicator -->
            <div class="typing-indicator" id="typing-indicator">
                Stranger is typing...
            </div>

            <!-- Input Area -->
            <div class="input-area">
                <form class="input-form" id="chatform">
                    <input type="text" class="message-input" id="messagebox" 
                           placeholder="Type a message..." disabled>
                    <button type="submit" class="btn btn-primary" id="send-btn" disabled>
                        <span>📤</span> Send
                    </button>
                </form>

                <div class="controls-row">
                    <div class="controls-right">
                        <button type="button" class="btn btn-next" id="next-btn">
                            <span>⏭️</span> Next
                        </button>
                        <button type="button" class="btn btn-end" id="end-btn">
                            <span>❌</span> End Chat
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <script>
        const socket = io();
        const chatform = document.querySelector("#chatform");
        const messagebox = document.querySelector("#messagebox");
        const sendBtn = document.querySelector("#send-btn");
        const nextBtn = document.querySelector("#next-btn");
        const endBtn = document.querySelector("#end-btn");
        const statusMessage = document.querySelector("#status-message");
        const statusArea = document.querySelector("#status-area");
        const chatStatus = document.querySelector("#chat-status");
        const messageContainer = document.querySelector("#message-container");
        const typingIndicator = document.querySelector("#typing-indicator");
        const videoPlaceholder = document.querySelector("#video-placeholder");
        
        let room;
        let isConnected = false;
        let typingTimeout;

        // Auto-join when page loads
        socket.emit("joinroom");

        // Handle user count updates
        socket.on("userCount", function(count) {
            document.getElementById("user-count").textContent = `${count} users online`;
        });

        // Update connection status
        function updateConnectionStatus(status, subtitle = "") {
            statusMessage.textContent = status;
            const subtitleEl = statusArea.querySelector('.status-subtitle');
            subtitleEl.textContent = subtitle;
            
            // Update chat header status
            chatStatus.textContent = isConnected ? "Connected" : "Waiting...";
            
            const statusEl = document.getElementById("connection-status");
            if (statusEl) {
                statusEl.textContent = status;
                statusEl.className = isConnected ? "text-green-600 text-sm font-medium" : "text-orange-500 text-sm font-medium";
            }
            
            // Update status area colors
            if (isConnected) {
                statusArea.style.background = "linear-gradient(135deg, #10b981, #059669)";
            } else {
                statusArea.style.background = "linear-gradient(135deg, #667eea, #764ba2)";
            }
        }

        socket.on("joined", function (data) {
            room = data.room;
            isConnected = true;
            statusArea.classList.add("hidden");
            
            // Enable chat controls
            messagebox.disabled = false;
            sendBtn.disabled = false;
            messagebox.placeholder = "Type a message and press Enter...";
            messagebox.focus();
            
            updateConnectionStatus("Connected to stranger", "You can now start chatting!");
            addSystemMessage("🎉 Connected! Starting video chat automatically...");
            
            // Auto-start video call - determine who should be caller based on socket ID order
            const roomUsers = data.room.split('-');
            const isCaller = socket.id === roomUsers[0]; // First user in room name is caller
            
            setTimeout(() => {
                initializeVideo(isCaller);
                // Hide the start button since video is auto-starting
                const startBtn = document.querySelector("#startChatBtn");
                if (startBtn) startBtn.style.display = "none";
            }, 1000);
        });

        socket.on("waiting", function(data) {
            isConnected = false;
            statusArea.classList.remove("hidden");
            updateConnectionStatus(data.message, "We're searching for someone awesome for you to chat with");
            
            // Disable chat controls
            messagebox.disabled = true;
            sendBtn.disabled = true;
            messagebox.placeholder = "Waiting for connection...";
            
            // Show video placeholder
            showVideoPlaceholder();
            
            clearChat();
        });

        socket.on("partnerLeft", function(data) {
            isConnected = false;
            statusArea.classList.remove("hidden");
            updateConnectionStatus("Stranger disconnected", "Click 'Next' to find someone new or 'End Chat' to return home");
            
            // Disable chat controls
            messagebox.disabled = true;
            sendBtn.disabled = true;
            messagebox.placeholder = "Stranger left the chat...";
            
            addSystemMessage("👋 " + data.message);
            
            // End video call
            if (inCall) {
                endVideoCall();
            }
        });

        socket.on("message", function (message) {
            receiveMessage(message);
        });

        // Next button functionality
        nextBtn.addEventListener("click", function() {
            socket.emit("nextUser");
            clearChat();
            statusArea.classList.remove("hidden");
            updateConnectionStatus("Finding next person...", "Looking for a new stranger to chat with");
            
            // Disable chat controls
            messagebox.disabled = true;
            sendBtn.disabled = true;
            messagebox.placeholder = "Searching for new connection...";
            
            // If in video call, end video first
            if (inCall) {
                endVideoCall();
            }
        });

        // End chat button functionality
        endBtn.addEventListener("click", function() {
            if (confirm("Are you sure you want to end the chat and return to home?")) {
                window.location.href = "/";
            }
        });

        // Chat form submission
        chatform.addEventListener("submit", function (event) {
            event.preventDefault();
            if (!isConnected || !messagebox.value.trim()) return;
            
            const message = messagebox.value.trim();
            socket.emit("message", { room: room, message: message });
            attachMessage(message);
            messagebox.value = "";
            hideTypingIndicator();
        });

        // Message functions
        function clearChat() {
            const messages = messageContainer.querySelectorAll('.message-item');
            messages.forEach(msg => msg.remove());
        }

        function addSystemMessage(message) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message-item', 'system-message');
            messageEl.innerHTML = `
                <div class="message-content">
                    ${message}
                </div>
            `;
            messageContainer.appendChild(messageEl);
            scrollToBottom();
        }

        function attachMessage(message) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message-item', 'message-sent');
            messageEl.innerHTML = `
                <div class="message-content">
                    ${escapeHtml(message)}
                </div>
            `;
            messageContainer.appendChild(messageEl);
            scrollToBottom();
        }

        function receiveMessage(message) {
            const messageEl = document.createElement('div');
            messageEl.classList.add('message-item', 'message-received');
            messageEl.innerHTML = `
                <div class="message-content">
                    ${escapeHtml(message)}
                </div>
            `;
            messageContainer.appendChild(messageEl);
            scrollToBottom();
        }

        function scrollToBottom() {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Typing indicator
        messagebox.addEventListener('input', () => {
            if (isConnected && messagebox.value.trim()) {
                socket.emit('typing', { room });
            }
        });
        
        socket.on('userTyping', () => {
            showTypingIndicator();
        });

        function showTypingIndicator() {
            typingIndicator.classList.add('show');
            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                hideTypingIndicator();
            }, 1000);
        }

        function hideTypingIndicator() {
            typingIndicator.classList.remove('show');
        }

        // WebRTC Video Call Functionality
        let localStream;
        let remoteStream;
        let peerConnection;
        let inCall = false;

        const rtcSettings = {
            iceServers: [
                { urls: "stun:stun.l.google.com:19302" },
                { urls: "stun:stun1.l.google.com:19302" }
            ]
        };

        // Video controls
        const startChatBtn = document.querySelector("#startChatBtn");
        
        // Auto-start video when button is clicked (manual trigger)
        startChatBtn.addEventListener("click", () => {
            if (!isConnected) {
                addSystemMessage("❌ Please wait for connection before starting video");
                return;
            }
            if (!inCall) {
                initializeVideo(true);
                startChatBtn.style.display = "none"; // Hide button after starting
            }
        });

        function showVideoModal() {
            document.querySelector("#video-modal").classList.remove("hidden");
        }

        function hideVideoModal() {
            document.querySelector("#video-modal").classList.add("hidden");
        }

        function showVideoPlaceholder() {
            const localVideo = document.querySelector("#localVideo");
            const remoteVideo = document.querySelector("#remoteVideo");
            const placeholder = document.querySelector("#video-placeholder");
            const startBtn = document.querySelector("#startChatBtn");
            
            if (localVideo) {
                localVideo.srcObject = null;
                localVideo.style.display = "none";
            }
            if (remoteVideo) {
                remoteVideo.srcObject = null;
                remoteVideo.style.display = "none";
            }
            if (placeholder) {
                placeholder.style.display = "flex";
            }
            if (startBtn) {
                startBtn.style.display = "flex";
            }
        }

        function hideVideoPlaceholder() {
            const placeholder = document.querySelector("#video-placeholder");
            const startBtn = document.querySelector("#startChatBtn");
            
            if (placeholder) {
                placeholder.style.display = "none";
            }
            if (startBtn) {
                startBtn.style.display = "none";
            }
        }

        const initializeVideo = async (isCaller = false) => {
            try {
                console.log("Initializing video...", { isCaller });
                
                localStream = await navigator.mediaDevices.getUserMedia({ 
                    audio: true, 
                    video: { width: 1280, height: 720 }
                });
                
                console.log("Got local stream:", localStream);
                const localVideo = document.querySelector("#localVideo");
                localVideo.srcObject = localStream;
                localVideo.style.display = "block"; // Make video visible
                
                // Hide the placeholder and connecting message
                hideVideoPlaceholder();
                
                createPeerConnection();
                
                if (isCaller) {
                    console.log("Initiating offer as caller");
                    setTimeout(() => initiateOffer(), 1000); // Small delay to ensure connection is ready
                }
                
                inCall = true;
                addSystemMessage("📹 Video call started");
                
            } catch (err) {
                console.error("Error accessing media devices:", err);
                addSystemMessage("❌ Camera/microphone access denied. Please allow camera and microphone access and refresh the page.");
            }
        };

        const createPeerConnection = () => {
            if (peerConnection) return;

            peerConnection = new RTCPeerConnection(rtcSettings);

            // Only add tracks if localStream exists
            if (localStream) {
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });
            }

            remoteStream = new MediaStream();
            const remoteVideo = document.querySelector("#remoteVideo");
            remoteVideo.srcObject = remoteStream;
            remoteVideo.style.display = "block"; // Make video visible

            peerConnection.ontrack = (event) => {
                event.streams[0].getTracks().forEach(track => {
                    remoteStream.addTrack(track);
                });
            };

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    socket.emit("signalingMessage", { 
                        room, 
                        message: JSON.stringify({ type: "candidate", candidate: event.candidate }) 
                    });
                }
            };

            peerConnection.onconnectionstatechange = () => {
                console.log("Connection state:", peerConnection.connectionState);
                if (peerConnection.connectionState === 'disconnected') {
                    endVideoCall();
                }
            };
        };

        const initiateOffer = async () => {
            try {
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                socket.emit("signalingMessage", { 
                    room, 
                    message: JSON.stringify({ type: "offer", offer }) 
                });
            } catch (err) {
                console.error("Error creating offer:", err);
            }
        };

        const handleOffer = async (offer) => {
            if (!peerConnection) createPeerConnection();
            
            try {
                await peerConnection.setRemoteDescription(offer);
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                socket.emit("signalingMessage", { 
                    room, 
                    message: JSON.stringify({ type: "answer", answer }) 
                });
            } catch (err) {
                console.error("Error handling offer:", err);
            }
        };

        const handleAnswer = async (answer) => {
            if (!peerConnection) return;
            
            try {
                await peerConnection.setRemoteDescription(answer);
            } catch (err) {
                console.error("Error handling answer:", err);
            }
        };

        const handleSignalingMessage = async (message) => {
            try {
                const { type, offer, answer, candidate } = JSON.parse(message);
                
                switch (type) {
                    case "offer":
                        await handleOffer(offer);
                        break;
                    case "answer":
                        await handleAnswer(answer);
                        break;
                    case "candidate":
                        if (peerConnection && candidate && peerConnection.remoteDescription) {
                            try {
                                await peerConnection.addIceCandidate(candidate);
                            } catch (err) {
                                console.error("Error adding ice candidate:", err);
                            }
                        }
                        break;
                    case "hangup":
                        endVideoCall();
                        break;
                }
            } catch (err) {
                console.error("Error handling signaling message:", err);
            }
        };

        function endVideoCall() {
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
            }
            
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                localStream = null;
            }
            
            if (remoteStream) {
                remoteStream.getTracks().forEach(track => track.stop());
                remoteStream = null;
            }
            
            document.querySelector("#localVideo").srcObject = null;
            document.querySelector("#remoteVideo").srcObject = null;
            
            // Show video placeholder when call ends
            showVideoPlaceholder();
            
            if (inCall) {
                socket.emit("signalingMessage", { 
                    room, 
                    message: JSON.stringify({ type: "hangup" }) 
                });
                addSystemMessage("📞 Video call ended");
                inCall = false;
            }
        }

        socket.on("signalingMessage", handleSignalingMessage);

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey && document.activeElement === messagebox) {
                e.preventDefault();
                chatform.dispatchEvent(new Event('submit'));
            }
        });

        // Handle page unload
        window.addEventListener('beforeunload', () => {
            if (inCall) {
                endVideoCall();
            }
            socket.disconnect();
        });

    </script>

</body>

</html>
